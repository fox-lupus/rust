const SIZE: usize = 6000;
use std::collections::VecDeque;
use std::thread;
use std::sync::{Arc, Mutex, mpsc};
//file IO
use std::path::Path;
use std::fs::File;
use std::io::BufRead;
use std::io;

struct Matrix {
    mat: [[usize;SIZE];SIZE]
}

impl Matrix {
    fn new() -> Self {
        Self {
            mat: [[0;SIZE]; SIZE]
        }
    }
    
}
//takes from the line read rust by example
fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>> where P: AsRef<Path>, {
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}

struct Graph {
    edge: Matrix,
    data: [i32;SIZE],
    size: usize,
}
impl Graph {
    fn new() -> Self {
        Self {
            edge: Matrix::new(),
            data: [0; SIZE],
            size: SIZE

        }
    }
    fn add_edge(&mut self, i:usize, j:usize) {
        self.edge.mat[i][j] = 1;
        self.edge.mat[j][i] = 1;

    }
    fn read_from(filename:&str) -> Self {
        let mut g = Graph::new();
        //open file
        if let Ok(lines) = read_lines(filename) {
            for line in lines {
                if let Ok(s) = line {
                    if !s.starts_with('#') {
                        let mut iter = s.split_whitespace();
                        let s1 = iter.next().unwrap();
                        let s2 = iter.next().unwrap();
                        g.add_edge(s1.parse::<usize>().unwrap(),
                                   s2.parse::<usize>().unwrap());
                    }
                }
            }
        }            
        g 
    }
    fn dfs(&mut self, v:usize) {
        //mark node found
        self.data[v] = 1;
        println!("{}", v);
        //for each node that could be contected to versdatex
        for e in 0..SIZE {
            //if there is a edge
            if self.edge.mat[v][e] == 1 {
                //if the vertex hasn't been found
                if self.data[e] == 0 {
                    let w = e;
                    if self.data[w] == 0 {
                        self.data[e] = 1;
                        Graph::dfs(self, w);
                    } else {
                        //dead end
                        self.data[e] = 2;
                    }
                }
            }
        }
    }
    fn bfs(&self, r:usize) {
        //que of all nodes that need to be vististed
        let mut verts = VecDeque::new();
        //boolean array to check if node has been visted before
        let mut visted = [false; SIZE];
        verts.push_back(r);
        while verts.len() != 0 {
            //if the que not empty
            if let Some(n) = verts.pop_front() {
                println!("{}", n);
                for v in 0..SIZE {
                    //if there is an edge
                    if self.edge.mat[n][v] == 1 {
                        if !visted[v] {
                            visted[v] = true;
                            verts.push_back(v);
                        }
                    }
                }
            }
            //println!("{:?}", verts)
        }
    }
    fn parra_bfs(&self, r:usize) {
        let edges = Arc::new(self.edge.mat); //is now immutable
        //boolean array to check if node has been visted before
        let visted = Arc::new(Mutex::new([false; SIZE]));
        //println!("{:?}", edges);
        //que of all nodes that need to be vististed. 
        let mut verts: VecDeque<usize> = VecDeque::new();
        verts.push_back(r);
        let mut vist = visted.lock().unwrap();
        vist[r] = true;//mark root as found
        drop(vist);
        loop {
            //if there is no nodes left
            if verts.is_empty() {
                break;
            }

            let (tx, rx) = mpsc::channel(); //collects the new visted nodes 
            let mut handles = vec![]; 
            for v in verts {
                let v = Arc::new(v); //must be sync so no handging pointers
                //allows mult owners
                let edges = Arc::clone(&edges);
                let visted = Arc::clone(&visted);
                //allows mult tranmistions
                let tx = tx.clone();
                let handle = thread::spawn(move || {      
                    for i in 0..SIZE {
                        //println!("{}", edges[*v][i]);
                        if edges[*v][i] == 1 { 
                            let mut vist = visted.lock().unwrap();
                            if !vist[i] {
                                vist[i] = true;
                                let _= tx.send(i.clone()); 
                            }
                        }
                    }
                });
                handles.push(handle);
            }
             
            for handle in handles {
                handle.join().unwrap();
            }
           //println!("{}", rec);
            verts = VecDeque::new(); //allows to be borrowed again
            drop(tx); //closing the channel
            for rec in rx {
                println!("{}", rec);
                if !verts.contains(&rec) {
                    verts.push_back(rec);
                }
            }
        
        }
    }
}
fn main() {
    let mut g = Graph::new();
    g.add_edge(4,0);
    g.add_edge(4,3);
    g.add_edge(5,0);
    g.add_edge(6,0);
    g.add_edge(6,7);
    g.bfs(0);
    g.parra_bfs(0);

    //let _big_g = Graph::read_from("CA-GrQc.txt");
}
